import os
import time
import logging
from datetime import datetime
from typing import Dict
from wifi import Cell, Scheme
from rich.progress import Progress
from rich.console import Console

class WifiPentestTool:
    def __init__(self, interface: str, target_ssid: str, wordlist_path: str, output_dir: str):
        self.interface = interface
        self.target_ssid = target_ssid
        self.wordlist_path = wordlist_path
        self.output_dir = output_dir
        self.console = Console()
        
        # Setup
        os.makedirs(output_dir, exist_ok=True)
        self._setup_logging()

    def _setup_logging(self):
        """Configure logging."""
        log_file = os.path.join(self.output_dir, f"pentest_{datetime.now():%Y%m%d_%H%M%S}.log")
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )

    def scan_wifi(self, scan_time: int = 30) -> Dict[str, dict]:
        """Scan for WiFi networks using wifi library."""
        logging.info("Starting WiFi scan...")
        networks = {}

        with Progress() as progress:
            task = progress.add_task("[cyan]Scanning networks...", total=scan_time)
            
            try:
                cells = Cell.all(self.interface)
                for cell in cells:
                    networks[cell.address] = {
                        'ssid': cell.ssid,
                        'channel': cell.channel,
                        'signal': cell.signal,
                        'encryption': cell.encryption_type if cell.encrypted else 'OPEN'
                    }
            except Exception as e:
                logging.error(f"Scan error: {str(e)}")
            
            while not progress.finished:
                progress.update(task, advance=1)
                time.sleep(1)

        return networks

    def cleanup(self):
        """Cleanup resources."""
        logging.info("Cleanup completed") 